# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fet_pb2 as fet__pb2


class MasterClientCommunicationServiceStub(object):
    """All function need to be for master 
    For simplicity only master can initiate communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BroadcastRandomFeatureSet = channel.unary_unary(
                '/com.groupseven.fet.MasterClientCommunicationService/BroadcastRandomFeatureSet',
                request_serializer=fet__pb2.BroadcastRandomFeatureSetRequest.SerializeToString,
                response_deserializer=fet__pb2.ReceivedResponse.FromString,
                )
        self.GetRandomSplitValueFromClient = channel.unary_unary(
                '/com.groupseven.fet.MasterClientCommunicationService/GetRandomSplitValueFromClient',
                request_serializer=fet__pb2.GetRandomSplitValueFromClientRequest.SerializeToString,
                response_deserializer=fet__pb2.GetRandomSplitValueFromClientResponse.FromString,
                )
        self.GetAggregatedValuesFromClient = channel.stream_unary(
                '/com.groupseven.fet.MasterClientCommunicationService/GetAggregatedValuesFromClient',
                request_serializer=fet__pb2.GetAggregatedValuesFromClientRequest.SerializeToString,
                response_deserializer=fet__pb2.GetAggregatedValuesFromClientResponse.FromString,
                )
        self.BroadcastTreeNodesBasedOnBestSplit = channel.unary_unary(
                '/com.groupseven.fet.MasterClientCommunicationService/BroadcastTreeNodesBasedOnBestSplit',
                request_serializer=fet__pb2.BroadcastTreeNodesBasedOnBestSplitRequest.SerializeToString,
                response_deserializer=fet__pb2.ReceivedResponse.FromString,
                )


class MasterClientCommunicationServiceServicer(object):
    """All function need to be for master 
    For simplicity only master can initiate communication
    """

    def BroadcastRandomFeatureSet(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRandomSplitValueFromClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAggregatedValuesFromClient(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BroadcastTreeNodesBasedOnBestSplit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterClientCommunicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BroadcastRandomFeatureSet': grpc.unary_unary_rpc_method_handler(
                    servicer.BroadcastRandomFeatureSet,
                    request_deserializer=fet__pb2.BroadcastRandomFeatureSetRequest.FromString,
                    response_serializer=fet__pb2.ReceivedResponse.SerializeToString,
            ),
            'GetRandomSplitValueFromClient': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRandomSplitValueFromClient,
                    request_deserializer=fet__pb2.GetRandomSplitValueFromClientRequest.FromString,
                    response_serializer=fet__pb2.GetRandomSplitValueFromClientResponse.SerializeToString,
            ),
            'GetAggregatedValuesFromClient': grpc.stream_unary_rpc_method_handler(
                    servicer.GetAggregatedValuesFromClient,
                    request_deserializer=fet__pb2.GetAggregatedValuesFromClientRequest.FromString,
                    response_serializer=fet__pb2.GetAggregatedValuesFromClientResponse.SerializeToString,
            ),
            'BroadcastTreeNodesBasedOnBestSplit': grpc.unary_unary_rpc_method_handler(
                    servicer.BroadcastTreeNodesBasedOnBestSplit,
                    request_deserializer=fet__pb2.BroadcastTreeNodesBasedOnBestSplitRequest.FromString,
                    response_serializer=fet__pb2.ReceivedResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.groupseven.fet.MasterClientCommunicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterClientCommunicationService(object):
    """All function need to be for master 
    For simplicity only master can initiate communication
    """

    @staticmethod
    def BroadcastRandomFeatureSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.groupseven.fet.MasterClientCommunicationService/BroadcastRandomFeatureSet',
            fet__pb2.BroadcastRandomFeatureSetRequest.SerializeToString,
            fet__pb2.ReceivedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRandomSplitValueFromClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.groupseven.fet.MasterClientCommunicationService/GetRandomSplitValueFromClient',
            fet__pb2.GetRandomSplitValueFromClientRequest.SerializeToString,
            fet__pb2.GetRandomSplitValueFromClientResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAggregatedValuesFromClient(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/com.groupseven.fet.MasterClientCommunicationService/GetAggregatedValuesFromClient',
            fet__pb2.GetAggregatedValuesFromClientRequest.SerializeToString,
            fet__pb2.GetAggregatedValuesFromClientResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BroadcastTreeNodesBasedOnBestSplit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.groupseven.fet.MasterClientCommunicationService/BroadcastTreeNodesBasedOnBestSplit',
            fet__pb2.BroadcastTreeNodesBasedOnBestSplitRequest.SerializeToString,
            fet__pb2.ReceivedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
